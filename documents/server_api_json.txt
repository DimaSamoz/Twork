#Server phone API
#This API is based on sending (UTF 8 encoded) JSON strings over a TCP socket in a request/respons style.
#We let the Java library and TCP worry about getting a reliable connection.
#Anything after a hash is a comment, otherwise it's JSON.

#phone-id could be the android ID: 'Secure.getString(getContext().getContentResolver(), Secure.ANDROID_ID);'
#Any other data can just be added to all the phones requests, eg gps co-ordinates, battery info etc.
#The order of key:value pairs does not matter.

### Phone request to server to fetch a new job ###
{
    "version": "0.0.1",
    "request": "getJob",
    "phone-id": "ANDROID_ID",
}

#Server response
{
    "version": "0.0.1",
    "response_code": 200, #Just reuse HTTP codes - 200 OK
    "request": "getJob",
    "jobID": x,
    "computationID": x
}

#If no jobs are available
{
    "version": "0.0.1",
    "response_code": 404,
    "error": "No jobs available", #Optional
    "request": "getJob"
}

#On an unexpected request return an error
{
    "version": "0.0.1",
    "response_code": xxx, #xxx != 200
    "error": "Error description" #Optional
    "request_header": "Theheadertheserverrecieved", #Optional
    "request": "getJob",
    "jobID": x,
    "computationID": x
}


### Phone request for computation data ###

#Request for job data is nearly identical, but replace "computationData" with "jobData".
{
    "version": "0.0.1",
    "request": "getComputationData",
    "jobID": x,
    "computationID": x,
    "phone-id": "ANDROID_ID"
}

#Server response
{
    "version": "0.0.1",
    "response_code": 200,
    "request": "getComputationData",
    "jobID": x,
    "computationID": x,
    "computationName": "Name",
    "computationData" "DATA"
}


### Phone request for code (a Java object) ###
#Instead of providing the code from this API we simply serve it off an HTTP server at some URL,
#(probably http://groups.ds.cam.ac.uk/clteach/grpproj/mike/$computationName).
#This has a few advantages:
#It's less work for our job server
#We can upgrade to HTTPS with a hard coded certificate for just the code easily
#The app can use URLClassLoader to hide the complexity of dynamically loading classes over the internet.

### Phone submitting completed job ###
{
    "version": "0.0.1",
    "request": "submitJob",
    "computationID": x,
    "jobID": x,
    "phone-id": "ANDROID_ID",
    "jobResult": "DATA"
}

#No response expected


### Phone requesting the server log something ###
#For debugging/error purposes
{
    "version": "0.0.1",
    "request": "log",
    "phone-id": "ANDROID_ID",
    "logData": "string"
}

#No response expected